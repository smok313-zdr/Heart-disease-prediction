set.seed(1432)
sample_index <- sample(nrow(heart), round(nrow(heart)*.75), replace = FALSE)
heart_train <- heart[sample_index,]
heart_test <- heart[-sample_index,]
heart_mod1 <- caret::knn3(heartDisease~., heart_train, k = 6)
heart_pred_knn1 <- predict(heart_mod1, heart_train, type = "class")
table1 <- confusionMatrix(heart_pred_knn1,heart_train$heartDisease, positive = "TRUE")
table1
heart_pred_knn2 <- predict(heart_mod1, heart_test, type = "class")
table2 <- confusionMatrix(heart_pred_knn2, heart_test$heartDisease, positive = "TRUE")
table2
heart_mod1 <- caret::knn3(heartDisease~., heart_train, k = 6)
heart_pred_knn1 <- predict(heart_mod1, heart_train, type = "class")
table1 <- confusionMatrix(heart_pred_knn1,heart_train$heartDisease, positive = "TRUE")
table1
heart_pred_knn2 <- predict(heart_mod1, heart_test, type = "class")
table2 <- confusionMatrix(heart_pred_knn2, heart_test$heartDisease, positive = "TRUE")
table2
heart_mod1 <- caret::knn3(heartDisease~., heart_train, k = 6)
heart_pred_knn1 <- predict(heart_mod1, heart_train, type = "class")
table1 <- confusionMatrix(heart_pred_knn1,heart_train$heartDisease, positive = "TRUE")
table1
heart_pred_knn2 <- predict(heart_mod1, heart_test, type = "class")
table2 <- confusionMatrix(heart_pred_knn2, heart_test$heartDisease, positive = "TRUE")
table2
heart_mod1 <- caret::knn3(heartDisease~., heart_train, k = 6)
heart_pred_knn1 <- predict(heart_mod1, heart_train, type = "class")
table1 <- confusionMatrix(heart_pred_knn1,heart_train$heartDisease, positive = "TRUE")
table1
heart_pred_knn2 <- predict(heart_mod1, heart_test, type = "class")
table2 <- confusionMatrix(heart_pred_knn2, heart_test$heartDisease, positive = "TRUE")
table2
heart_mod1 <- caret::knn3(heartDisease~., heart_train, k = 6)
heart_pred_knn1 <- predict(heart_mod1, heart_train, type = "class")
table1 <- confusionMatrix(heart_pred_knn1,heart_train$heartDisease, positive = "TRUE")
table1
heart_pred_knn2 <- predict(heart_mod1, heart_test, type = "class")
table2 <- confusionMatrix(heart_pred_knn2, heart_test$heartDisease, positive = "TRUE")
table2
heart_mod1 <- caret::knn3(heartDisease~., heart_train, k = 6)
heart_pred_knn1 <- predict(heart_mod1, heart_train, type = "class")
table1 <- confusionMatrix(heart_pred_knn1,heart_train$heartDisease, positive = "TRUE")
table1
heart_pred_knn2 <- predict(heart_mod1, heart_test, type = "class")
table2 <- confusionMatrix(heart_pred_knn2, heart_test$heartDisease, positive = "TRUE")
table2
heart_mod1 <- caret::knn3(heartDisease~., heart_train, k = 6)
heart_pred_knn1 <- predict(heart_mod1, heart_train, type = "class")
table1 <- confusionMatrix(heart_pred_knn1,heart_train$heartDisease, positive = "TRUE")
table1
heart_pred_knn2 <- predict(heart_mod1, heart_test, type = "class")
table2 <- confusionMatrix(heart_pred_knn2, heart_test$heartDisease, positive = "TRUE")
table2
pred1_2 <- predict(heart_mod1, heart_test, type = "prob")
roc_pred_knn <- prediction(pred1_2[,2], heart_test$heartDisease)
AUC1_2 <- performance(roc_pred_knn, "auc")@y.values # AUC
roc_pred_knn <- performance(roc_pred_knn, "tpr", "fpr")
plot(roc_pred_knn, col = 4, lwd = 2, xlab = "1-Specificity", ylab = "Sensitivity", main = paste("ROC Curve (Test)"))
lines(x = c(0,1), y = c(0,1), col = 2, lty = 2, lwd = 2)
legend(cex=1, "bottomright", legend = c(paste("KNN model, AUC:",AUC1_2),"Random"), col = c(4,2), lty = c(1,2), lwd = 2)
heart <- read_csv("heart.csv", col_types = "nffnnffnfnfnff")
colSums(is.na(heart))
glimpse(heart)
# Przygotowanie danych
heart <- heart %>% filter(!is.na(restingBP) & !is.na(cholesterol) & !is.na(highBloodSugar) & !is.na(restingECG) & !is.na(restingHR)
& !is.na(exerciseAngina) & !is.na(STdepression) & !is.na(STslope) & !is.na(coloredVessels) & !is.na(defectType))
heart <- heart %>% filter(!highBloodSugar=="NA" & !STslope=="NA" & !defectType=="NA")
# normalizacja
normalize <- function(x) {
return((x-min(x))/(max(x)-min(x)))
}
heart <- heart %>% mutate(age = normalize(age)) %>%
mutate(restingBP = normalize(restingBP)) %>%
mutate(cholesterol = normalize(cholesterol)) %>%
mutate(restingHR = normalize(restingHR)) %>%
mutate(STdepression = normalize(STdepression)) %>%
mutate(coloredVessels = normalize(coloredVessels))
set.seed(5524)
sample_index <- sample(nrow(heart), round(nrow(heart)*.75), replace = FALSE)
heart_train <- heart[sample_index,]
heart_test <- heart[-sample_index,]
library(e1071)
heart_mod1 <- svm(heartDisease~., type = "C-classification", data = heart_train, probability = TRUE)
heart_pred_svm1 <- predict(heart_mod1, heart_train, type = "class")
confusionMatrix(heart_train$heartDisease,heart_pred_svm1, positive = "TRUE")
heart_pred_svm2 <- predict(heart_mod1, heart_test, type = "class")
confusionMatrix(heart_test$heartDisease,heart_pred_svm2, positive = "TRUE")
ctrl_cv5 <- trainControl(method = "cv",number = 5, classProbs = TRUE)
parametryC_sigma <-
expand.grid(C = c(0.01, 0.05, 0.1, 0.5, 1, 5),
sigma = c(0.5, 1, 2.5, 5, 10))
grupa.svm_Radial <- train(make.names(heartDisease) ~ .,
data = heart_train,
method = "svmRadial",
tuneGrid = parametryC_sigma,
trControl = ctrl_cv5)
grupa.svm_Radial$finalModel
modelLookup("svmRadial")
prognozy1 <- predict(grupa.svm_Radial,newdata = heart_train)
prognozy1 <- factor(ifelse(prognozy1=="TRUE.","TRUE","FALSE"),levels = c("FALSE","TRUE"))
table1 <- confusionMatrix(prognozy1, heart_train$heartDisease, positive = "TRUE")
table1
prognozy2 <- predict(grupa.svm_Radial,newdata = heart_test)
prognozy2 <- factor(ifelse(prognozy2=="TRUE.","TRUE","FALSE"),levels = c("FALSE","TRUE"))
table2 <- confusionMatrix(prognozy2, heart_test$heartDisease, positive = "TRUE")
table2
pred2_2 <- predict(grupa.svm_Radial, heart_test, type = "prob", probability = TRUE)
roc_pred_svm = prediction(pred2_2[,2], heart_test$heartDisease)
roc_perf_svm = performance(roc_pred_svm, "tpr","fpr")
AUC2_2 <- performance(roc_pred_svm, "auc")@y.values # AUC
plot(roc_perf_svm, col = 4, lwd = 2, xlab = "1-Specificity", ylab = "Sensitivity", main = paste("ROC Curve (Test)\nAUC:",AUC2_2)) # ROC
lines(x = c(0,1), y = c(0,1), col = 2, lty = 2, lwd = 2)
legend(cex=1, "bottomright", legend = c("SVM model","Random"), col = c(4,2), lty = c(1,2), lwd = 2)
heart <- read_csv("heart.csv", col_types = "nffnnffnfnfnff")
colSums(is.na(heart))
glimpse(heart)
# Przygotowanie danych
heart <- heart %>% filter(!is.na(restingBP) & !is.na(cholesterol) & !is.na(highBloodSugar) & !is.na(restingECG) & !is.na(restingHR)
& !is.na(exerciseAngina) & !is.na(STdepression) & !is.na(STslope) & !is.na(coloredVessels) & !is.na(defectType))
heart <- heart %>% filter(!highBloodSugar=="NA" & !STslope=="NA" & !defectType=="NA")
# normalizacja
normalize <- function(x) {
return((x-min(x))/(max(x)-min(x)))
}
heart <- heart %>% mutate(age = normalize(age)) %>%
mutate(restingBP = normalize(restingBP)) %>%
mutate(cholesterol = normalize(cholesterol)) %>%
mutate(restingHR = normalize(restingHR)) %>%
mutate(STdepression = normalize(STdepression)) %>%
mutate(coloredVessels = normalize(coloredVessels))
set.seed(4321)
sample_index <- sample(nrow(heart), round(nrow(heart)*.75), replace = FALSE)
heart_train <- heart[sample_index,]
heart_test <- heart[-sample_index,]
library(rpart)
heart_mod1 <- rpart(heartDisease~., method = "class", data = heart_train)
library(rpart.plot)
rpart.plot(heart_mod1)
heart_pred_rpart1 <- predict(heart_mod1, heart_train, type = "class")
confusionMatrix(heart_train$heartDisease,heart_pred_rpart1, positive = "TRUE")
heart_pred_rpart2 <- predict(heart_mod1, heart_test, type = "class")
confusionMatrix(heart_test$heartDisease,heart_pred_rpart2, positive = "TRUE")
opt <- which.min(heart_mod1$cptable[, "xerror"])
cp <- heart_mod1$cptable[opt, "CP"]
heart_mod1p <- prune(heart_mod1, cp = cp)
rpart.plot(heart_mod1p)
heart_pred_rpart1p <- predict(heart_mod1p, heart_train, type = "class")
confusionMatrix(heart_train$heartDisease,heart_pred_rpart1p, positive = "TRUE")
heart_pred_rpart2p <- predict(heart_mod1p, heart_test, type = "class")
confusionMatrix(heart_test$heartDisease,heart_pred_rpart2p, positive = "TRUE")
seeds <- vector(mode = "list", length = nrow(heart_train) + 1)
seeds <- lapply(seeds, function(x) 5:25)
fitControl <- trainControl(method = "cv",
number = 10,
returnResamp="final",
#    ## Estimate class probabilities
classProbs = T,
#    ## Evaluate performance using
#    ## the following function
summaryFunction = twoClassSummary,
savePredictions = T,
seeds=seeds,
search = "random"
)
DT <- train(make.names(heartDisease)~.,data=heart_train,
method =  'rpart',
trControl = fitControl,
metric="ROC",
tuneLength = 5,
parms = list(split = 'information'),
maxdepth = 10,
minsplit = 50, # number of obs in a split
minbucket =  round(50/3)
)
heart_mod1p <- prune(heart_mod1, cp = DT$bestTune$cp)
heart_pred_rpart1p <- predict(heart_mod1p, heart_train, type = "class")
table1 <- confusionMatrix(heart_pred_rpart1p, heart_train$heartDisease, positive = "TRUE")
table1
heart_pred_rpart2p <- predict(heart_mod1p, heart_test, type = "class")
table2 <- confusionMatrix(heart_pred_rpart2p, heart_test$heartDisease, positive = "TRUE")
table2
seeds <- vector(mode = "list", length = nrow(heart_train) + 1)
seeds <- lapply(seeds, function(x) 5:25)
fitControl <- trainControl(method = "cv",
number = 10,
returnResamp="final",
#    ## Estimate class probabilities
classProbs = T,
#    ## Evaluate performance using
#    ## the following function
summaryFunction = twoClassSummary,
savePredictions = T,
seeds=seeds,
search = "random"
)
DT <- train(make.names(heartDisease)~.,data=heart_train,
method =  'rpart',
trControl = fitControl,
metric="ROC",
tuneLength = 5,
parms = list(split = 'information'),
maxdepth = 10,
minsplit = 50, # number of obs in a split
minbucket =  round(50/3)
)
heart_mod1p <- prune(heart_mod1, cp = DT$bestTune$cp)
heart_pred_rpart1p <- predict(heart_mod1p, heart_train, type = "class")
table1 <- confusionMatrix(heart_pred_rpart1p, heart_train$heartDisease, positive = "TRUE")
table1
heart_pred_rpart2p <- predict(heart_mod1p, heart_test, type = "class")
table2 <- confusionMatrix(heart_pred_rpart2p, heart_test$heartDisease, positive = "TRUE")
table2
pred3_2 <- predict(heart_mod1p, heart_test, type = "prob")
roc_pred_rpart = prediction(pred3_2[,2], heart_test$heartDisease)
roc_perf_rpart = performance(roc_pred_rpart, "tpr","fpr")
AUC3_2 <- performance(roc_pred_rpart, "auc")@y.values # AUC
plot(roc_perf_rpart, col = 4, lwd = 2, xlab = "1-Specificity", ylab = "Sensitivity", main = paste("ROC Curve (Test)\nAUC:",AUC3_2)) # ROC
lines(x = c(0,1), y = c(0,1), col = 2, lty = 2, lwd = 2)
legend(cex=1, "bottomright", legend = c("Tree model","Random"), col = c(4,2), lty = c(1,2), lwd = 2)
heart <- read_csv("heart.csv", col_types = "nffnnffnfnfnff")
colSums(is.na(heart))
glimpse(heart)
# Przygotowanie danych
heart <- heart %>% filter(!is.na(restingBP) & !is.na(cholesterol) & !is.na(highBloodSugar) & !is.na(restingECG) & !is.na(restingHR)
& !is.na(exerciseAngina) & !is.na(STdepression) & !is.na(STslope) & !is.na(coloredVessels) & !is.na(defectType))
heart <- heart %>% filter(!highBloodSugar=="NA" & !STslope=="NA" & !defectType=="NA")
# normalizacja
normalize <- function(x) {
return((x-min(x))/(max(x)-min(x)))
}
heart <- heart %>% mutate(age = normalize(age)) %>%
mutate(restingBP = normalize(restingBP)) %>%
mutate(cholesterol = normalize(cholesterol)) %>%
mutate(restingHR = normalize(restingHR)) %>%
mutate(STdepression = normalize(STdepression)) %>%
mutate(coloredVessels = normalize(coloredVessels))
set.seed(4321)
sample_index <- sample(nrow(heart), round(nrow(heart)*.75), replace = FALSE)
heart_train <- heart[sample_index,]
heart_test <- heart[-sample_index,]
library(randomForest)
heart_rf_mod1 <- randomForest(heartDisease~., data = heart_train)
heart_rf_mod1_pred <- predict(heart_rf_mod1,heart_train)
confusionMatrix(heart_train$heartDisease,heart_rf_mod1_pred, positive = "TRUE")
heart_rf_mod2_pred <- predict(heart_rf_mod1,heart_test)
confusionMatrix(heart_test$heartDisease,heart_rf_mod2_pred, positive = "TRUE")
seeds <- vector(mode = "list", length = nrow(heart_train) + 1)
seeds <- lapply(seeds, function(x) 1:11)
fitControl <- trainControl(
method = "cv", number = 10,
returnResamp="all",
#    ## Estimate class probabilities
classProbs = T,
#    ## Evaluate performance using
#    ## the following function
summaryFunction = twoClassSummary,
savePredictions = T,
search = "random"
)
rf <- train(make.names(heartDisease)~., data=heart_train,
method =  'rf',
importance=TRUE,
trControl = fitControl,
# ntree=500,
metric="ROC",
tuneLength = 5
)
heart_rf_mod1 <- randomForest(heartDisease~., data = heart_train, mtry = rf$bestTune$mtry, ntree = 500)
heart_rf_mod1_pred <- predict(heart_rf_mod1,heart_train)
table1 <- confusionMatrix(heart_rf_mod1_pred, heart_train$heartDisease, positive = "TRUE")
table1
heart_rf_mod2_pred <- predict(heart_rf_mod1,heart_test)
table2 <- confusionMatrix(heart_rf_mod2_pred, heart_test$heartDisease, positive = "TRUE")
table2
seeds <- vector(mode = "list", length = nrow(heart_train) + 1)
seeds <- lapply(seeds, function(x) 1:11)
fitControl <- trainControl(
method = "cv", number = 10,
returnResamp="all",
#    ## Estimate class probabilities
classProbs = T,
#    ## Evaluate performance using
#    ## the following function
summaryFunction = twoClassSummary,
savePredictions = T,
search = "random"
)
rf <- train(make.names(heartDisease)~., data=heart_train,
method =  'rf',
importance=TRUE,
trControl = fitControl,
# ntree=500,
metric="ROC",
tuneLength = 5
)
heart_rf_mod1 <- randomForest(heartDisease~., data = heart_train, mtry = rf$bestTune$mtry, ntree = 500)
heart_rf_mod1_pred <- predict(heart_rf_mod1,heart_train)
table1 <- confusionMatrix(heart_rf_mod1_pred, heart_train$heartDisease, positive = "TRUE")
table1
heart_rf_mod2_pred <- predict(heart_rf_mod1,heart_test)
table2 <- confusionMatrix(heart_rf_mod2_pred, heart_test$heartDisease, positive = "TRUE")
table2
seeds <- vector(mode = "list", length = nrow(heart_train) + 1)
seeds <- lapply(seeds, function(x) 1:11)
fitControl <- trainControl(
method = "cv", number = 10,
returnResamp="all",
#    ## Estimate class probabilities
classProbs = T,
#    ## Evaluate performance using
#    ## the following function
summaryFunction = twoClassSummary,
savePredictions = T,
search = "random"
)
rf <- train(make.names(heartDisease)~., data=heart_train,
method =  'rf',
importance=TRUE,
trControl = fitControl,
# ntree=500,
metric="ROC",
tuneLength = 5
)
heart_rf_mod1 <- randomForest(heartDisease~., data = heart_train, mtry = rf$bestTune$mtry, ntree = 500)
heart_rf_mod1_pred <- predict(heart_rf_mod1,heart_train)
table1 <- confusionMatrix(heart_rf_mod1_pred, heart_train$heartDisease, positive = "TRUE")
table1
heart_rf_mod2_pred <- predict(heart_rf_mod1,heart_test)
table2 <- confusionMatrix(heart_rf_mod2_pred, heart_test$heartDisease, positive = "TRUE")
table2
seeds <- vector(mode = "list", length = nrow(heart_train) + 1)
seeds <- lapply(seeds, function(x) 1:11)
fitControl <- trainControl(
method = "cv", number = 10,
returnResamp="all",
#    ## Estimate class probabilities
classProbs = T,
#    ## Evaluate performance using
#    ## the following function
summaryFunction = twoClassSummary,
savePredictions = T,
search = "random"
)
rf <- train(make.names(heartDisease)~., data=heart_train,
method =  'rf',
importance=TRUE,
trControl = fitControl,
# ntree=500,
metric="ROC",
tuneLength = 5
)
heart_rf_mod1 <- randomForest(heartDisease~., data = heart_train, mtry = rf$bestTune$mtry, ntree = 500)
heart_rf_mod1_pred <- predict(heart_rf_mod1,heart_train)
table1 <- confusionMatrix(heart_rf_mod1_pred, heart_train$heartDisease, positive = "TRUE")
table1
heart_rf_mod2_pred <- predict(heart_rf_mod1,heart_test)
table2 <- confusionMatrix(heart_rf_mod2_pred, heart_test$heartDisease, positive = "TRUE")
table2
seeds <- vector(mode = "list", length = nrow(heart_train) + 1)
seeds <- lapply(seeds, function(x) 1:11)
fitControl <- trainControl(
method = "cv", number = 10,
returnResamp="all",
#    ## Estimate class probabilities
classProbs = T,
#    ## Evaluate performance using
#    ## the following function
summaryFunction = twoClassSummary,
savePredictions = T,
search = "random"
)
rf <- train(make.names(heartDisease)~., data=heart_train,
method =  'rf',
importance=TRUE,
trControl = fitControl,
# ntree=500,
metric="ROC",
tuneLength = 5
)
heart_rf_mod1 <- randomForest(heartDisease~., data = heart_train, mtry = rf$bestTune$mtry, ntree = 500)
heart_rf_mod1_pred <- predict(heart_rf_mod1,heart_train)
table1 <- confusionMatrix(heart_rf_mod1_pred, heart_train$heartDisease, positive = "TRUE")
table1
heart_rf_mod2_pred <- predict(heart_rf_mod1,heart_test)
table2 <- confusionMatrix(heart_rf_mod2_pred, heart_test$heartDisease, positive = "TRUE")
table2
seeds <- vector(mode = "list", length = nrow(heart_train) + 1)
seeds <- lapply(seeds, function(x) 1:11)
fitControl <- trainControl(
method = "cv", number = 10,
returnResamp="all",
#    ## Estimate class probabilities
classProbs = T,
#    ## Evaluate performance using
#    ## the following function
summaryFunction = twoClassSummary,
savePredictions = T,
search = "random"
)
rf <- train(make.names(heartDisease)~., data=heart_train,
method =  'rf',
importance=TRUE,
trControl = fitControl,
# ntree=500,
metric="ROC",
tuneLength = 5
)
heart_rf_mod1 <- randomForest(heartDisease~., data = heart_train, mtry = rf$bestTune$mtry, ntree = 500)
heart_rf_mod1_pred <- predict(heart_rf_mod1,heart_train)
table1 <- confusionMatrix(heart_rf_mod1_pred, heart_train$heartDisease, positive = "TRUE")
table1
heart_rf_mod2_pred <- predict(heart_rf_mod1,heart_test)
table2 <- confusionMatrix(heart_rf_mod2_pred, heart_test$heartDisease, positive = "TRUE")
table2
seeds <- vector(mode = "list", length = nrow(heart_train) + 1)
seeds <- lapply(seeds, function(x) 1:11)
fitControl <- trainControl(
method = "cv", number = 10,
returnResamp="all",
#    ## Estimate class probabilities
classProbs = T,
#    ## Evaluate performance using
#    ## the following function
summaryFunction = twoClassSummary,
savePredictions = T,
search = "random"
)
rf <- train(make.names(heartDisease)~., data=heart_train,
method =  'rf',
importance=TRUE,
trControl = fitControl,
# ntree=500,
metric="ROC",
tuneLength = 5
)
heart_rf_mod1 <- randomForest(heartDisease~., data = heart_train, mtry = rf$bestTune$mtry, ntree = 500)
heart_rf_mod1_pred <- predict(heart_rf_mod1,heart_train)
table1 <- confusionMatrix(heart_rf_mod1_pred, heart_train$heartDisease, positive = "TRUE")
table1
heart_rf_mod2_pred <- predict(heart_rf_mod1,heart_test)
table2 <- confusionMatrix(heart_rf_mod2_pred, heart_test$heartDisease, positive = "TRUE")
table2
seeds <- vector(mode = "list", length = nrow(heart_train) + 1)
seeds <- lapply(seeds, function(x) 1:11)
fitControl <- trainControl(
method = "cv", number = 10,
returnResamp="all",
#    ## Estimate class probabilities
classProbs = T,
#    ## Evaluate performance using
#    ## the following function
summaryFunction = twoClassSummary,
savePredictions = T,
search = "random"
)
rf <- train(make.names(heartDisease)~., data=heart_train,
method =  'rf',
importance=TRUE,
trControl = fitControl,
# ntree=500,
metric="ROC",
tuneLength = 5
)
heart_rf_mod1 <- randomForest(heartDisease~., data = heart_train, mtry = rf$bestTune$mtry, ntree = 500)
heart_rf_mod1_pred <- predict(heart_rf_mod1,heart_train)
table1 <- confusionMatrix(heart_rf_mod1_pred, heart_train$heartDisease, positive = "TRUE")
table1
heart_rf_mod2_pred <- predict(heart_rf_mod1,heart_test)
table2 <- confusionMatrix(heart_rf_mod2_pred, heart_test$heartDisease, positive = "TRUE")
table2
seeds <- vector(mode = "list", length = nrow(heart_train) + 1)
seeds <- lapply(seeds, function(x) 1:11)
fitControl <- trainControl(
method = "cv", number = 10,
returnResamp="all",
#    ## Estimate class probabilities
classProbs = T,
#    ## Evaluate performance using
#    ## the following function
summaryFunction = twoClassSummary,
savePredictions = T,
search = "random"
)
rf <- train(make.names(heartDisease)~., data=heart_train,
method =  'rf',
importance=TRUE,
trControl = fitControl,
# ntree=500,
metric="ROC",
tuneLength = 5
)
heart_rf_mod1 <- randomForest(heartDisease~., data = heart_train, mtry = rf$bestTune$mtry, ntree = 500)
heart_rf_mod1_pred <- predict(heart_rf_mod1,heart_train)
table1 <- confusionMatrix(heart_rf_mod1_pred, heart_train$heartDisease, positive = "TRUE")
table1
heart_rf_mod2_pred <- predict(heart_rf_mod1,heart_test)
table2 <- confusionMatrix(heart_rf_mod2_pred, heart_test$heartDisease, positive = "TRUE")
table2
pred4_2 <- predict(heart_rf_mod1, heart_test, type = "prob")
roc_pred_rf = prediction(pred4_2[,2], heart_test$heartDisease)
roc_perf_rf = performance(roc_pred_rf, "tpr","fpr")
AUC4_2 <- performance(roc_pred_rf, "auc")@y.values # AUC
plot(roc_perf_rf, col = 4, lwd = 2, xlab = "1-Specificity", ylab = "Sensitivity", main = paste("ROC Curve (Test)\nAUC:",AUC4_2)) # ROC
lines(x = c(0,1), y = c(0,1), col = 2, lty = 2, lwd = 2)
legend(cex=1, "bottomright", legend = c("Random forest model","Random"), col = c(4,2), lty = c(1,2), lwd = 2)
plot(roc_pred_knn, col = 4, lwd = 2, xlab = "1-Specificity", ylab = "Sensitivity", main = paste("ROC Curve (Test)")) # ROC
plot(roc_perf_svm, add = TRUE, col = 3, lwd = 2)
plot(roc_perf_rpart, add = TRUE, col = 5, lwd = 2)
plot(roc_perf_rf, add = TRUE, col = 6, lwd = 2)
lines(x = c(0,1), y = c(0,1), col = 2, lty = 2, lwd = 2)
legend(cex=1, "bottomright", legend = c(paste("KNN model, AUC:",AUC1_2),paste("SVM model, AUC:",AUC2_2),paste("Decision tree model, AUC:",AUC3_2),
paste("Random forest model, AUC:",AUC4_2),"Random"), col = c(4,3,5,6,2), lty = c(1,1,1,1,2), lwd = 2)
